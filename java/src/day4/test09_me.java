package day4;

public class test09_me {
	public static void main(String[] args) {
		// test09_DNA 비밀번호
		/* 평소 문자열을 이용해 노는 것을 좋아하는 민호는 DNA 문자열을 알게 됐다. 
		DNA 문자열은 모든 문자열에 등장하는 문자가 {'A', 'C', 'G', 'T'} 인 문자열을 말한다. 
		예를 들어 "ACKA" 는 DNA 문자열이 아니지만, "ACCA" 는 DNA 문자열이다. 
		이런 신비한 문자열에 완전히 매료된 민호는 임의의 DNA 문자열을 만들고 만들어진 DNA 문자열의 부분 문자열을 비밀번호로 사용하기로 마음먹었다.
		하지만 민호는 이 방법에는 큰 문제가 있다는 것을 발견했다. 
		임의의 DNA 문자열의 부분 문자열을 뽑았을 때 "AAAA" 와 같이 보안에 취약한 비밀번호가 만들어질 수 있기 때문이다. 
		그래서 민호는 부분 문자열에서 등장하는 문자의 개수가 특정 개수 이상이어야 비밀번호로 사용할 수 있다는 규칙을 만들었다. 
		예를 들어 임의의 DNA 문자열이 "AAACCTGCCAA" 이고, 민호가 뽑을 부분 문자열의 길이를 4라고 가정해보자. 
		그리고 부분 문자열에 'A' 는 1개 이상, 'C'는 1개 이상, 'G'는 1개 이상, 'T'는 0개 이상 등장해야 비밀번호로 사용할 수 있다고 가정해보자. 
		이때 "ACCT"는 'G'가 1개 이상 등장해야 한다는 조건을 만족하지 못해 비밀번호로 사용할 수 없지만, "GCCA"은 모든 조건을 만족하므로 비밀번호로 사용할 수 있다.
		민호가 만든 임의의 DNA 문자열과 비밀번호로 사용할 부분 문자열의 길이 그리고 {'A', 'C', 'G', 'T'}가 각각 몇 번 이상 등장해야 비밀번호로 사용할 수 있는지, 
		순서대로 주어졌을 때 민호가 만들 수 있는 비밀번호의 종류의 수를 구하는 프로그램을 작성하시오. 
		단, 부분 문자열이 등장하는 위치가 다르면 부분 문자열의 내용이 같더라도 다른 문자열로 취급한다.
		*/
		
		// 데이터 저장
		// S(문자열 크기) P(부분 문자열의 크기)
		// A(문자열 데이터)
		// checkArr(비밀전호 체크 배열)
		// 변수 선언
		// myArr(현재 상태 배열)
		// checkSecret(몇 개의 문자와 관련된 개수를 충족했는지 판단하는 변수)
		// P 범위(0 ~ P-1)만큼 S 배열에 적용하고, 유효한 비밀번호인지 판단하기
		// for(i를 P에서 S까지 반복) {
		// 		j 선언(i - P)
		// 		이 부분은 함수로 별도 구현하기
		// 		한칸씩 이동하면서 제거되는 문자열과 새로 들어오는 문자열을 처리하기
		// 		유효한 비밀번호인지(checkSecret == 4) 판단해 결괏값에 업데이트하기
		// }
		// 결과값 출력하기
		// 
		// 별도 함수
		// Add(문자 더하기 함수) { 새로 들어온 문자를 myArr에 업데이트하거나 checkSecret 값 변경하기 }
		// Remove(문자 빼기 함수){ 제거되는 문자를 myArr에 업데이트하거나 checkSecret 값 변경하기 }
		
		
	}
}
